# Generated by Django 4.0.4 on 2022-05-08 09:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('fname', models.CharField(db_column='FName', max_length=45)),
                ('lname', models.CharField(db_column='LName', max_length=25)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=100, null=True)),
                ('gender', models.CharField(blank=True, db_column='Gender', max_length=10, null=True)),
                ('age', models.IntegerField(blank=True, db_column='Age', null=True)),
                ('contact', models.CharField(blank=True, db_column='Contact', max_length=12, null=True)),
                ('job_type', models.CharField(blank=True, db_column='Job_Type', max_length=20, null=True)),
                ('salary', models.IntegerField(blank=True, db_column='Salary', null=True)),
                ('manager', models.ForeignKey(blank=True, db_column='Manager_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.employee')),
            ],
            options={
                'db_table': 'employee',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PaymentInfo',
            fields=[
                ('paymentid', models.AutoField(db_column='Paymentid', primary_key=True, serialize=False)),
                ('card_no', models.CharField(db_column='Card_No', max_length=18)),
                ('cvv', models.IntegerField(db_column='CVV')),
                ('expiry', models.DateField(db_column='Expiry')),
            ],
            options={
                'db_table': 'payment_info',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RestaurantTable',
            fields=[
                ('table_no', models.IntegerField(db_column='Table_no', primary_key=True, serialize=False)),
                ('table_type', models.CharField(blank=True, db_column='Table_Type', max_length=15, null=True)),
                ('availability', models.BooleanField(db_column='Availability', default=True)),
            ],
            options={
                'db_table': 'restaurant_table',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('room_no', models.IntegerField(db_column='Room_no', primary_key=True, serialize=False)),
                ('room_type', models.CharField(blank=True, db_column='Room_Type', max_length=20, null=True)),
                ('rent', models.IntegerField(blank=True, db_column='Rent', null=True)),
                ('availability', models.BooleanField(db_column='Availability', default=True)),
            ],
            options={
                'db_table': 'room',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chef',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.employee')),
            ],
            options={
                'db_table': 'chef',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Receptionist',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.employee')),
            ],
            options={
                'db_table': 'receptionist',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RoomService',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.employee')),
            ],
            options={
                'db_table': 'room_service',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Waiter',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.employee')),
            ],
            options={
                'db_table': 'waiter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('guest_id', models.IntegerField(db_column='Guest_ID', primary_key=True, serialize=False)),
                ('fname', models.CharField(db_column='FName', max_length=45)),
                ('lname', models.CharField(db_column='LName', max_length=45)),
                ('email_address', models.CharField(blank=True, db_column='Email_Address', max_length=35, null=True)),
                ('contact', models.CharField(blank=True, db_column='Contact', max_length=20, null=True)),
                ('nationality', models.CharField(blank=True, db_column='Nationality', max_length=15, null=True)),
                ('payment', models.ForeignKey(blank=True, db_column='Payment_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.paymentinfo')),
            ],
            options={
                'db_table': 'guest',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False, verbose_name='isadmin')),
                ('is_receptionist', models.BooleanField(default=False, verbose_name='isreceptionist')),
                ('is_owner', models.BooleanField(default=False, verbose_name='isowner')),
                ('is_guest', models.BooleanField(default=True, verbose_name='isguest')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('reservation_id', models.AutoField(db_column='Reservation_ID', primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, db_column='Date', null=True)),
                ('time', models.TimeField(blank=True, db_column='Time', null=True)),
                ('guest', models.ForeignKey(blank=True, db_column='Guest_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.guest')),
                ('table_no', models.ForeignKey(blank=True, db_column='Table_no', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.restauranttable')),
                ('receptionist', models.ForeignKey(blank=True, db_column='Receptionist_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.receptionist')),
            ],
            options={
                'db_table': 'reservation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('order_id', models.AutoField(db_column='Order_ID', primary_key=True, serialize=False)),
                ('menu_items', models.TextField(blank=True, db_column='Menu_Items', null=True)),
                ('date', models.DateField(blank=True, db_column='Date', null=True)),
                ('time', models.TimeField(blank=True, db_column='Time', null=True)),
                ('bill', models.IntegerField(blank=True, db_column='Bill', null=True)),
                ('guest', models.ForeignKey(blank=True, db_column='Guest_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.guest')),
                ('delivered_by', models.ForeignKey(blank=True, db_column='Delivered_by', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.roomservice')),
            ],
            options={
                'db_table': 'orders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('item_id', models.AutoField(db_column='Item_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=30, null=True)),
                ('price', models.IntegerField(blank=True, db_column='Price', null=True)),
                ('type', models.CharField(blank=True, db_column='Type', max_length=15, null=True)),
                ('serving_persons', models.IntegerField(blank=True, db_column='Serving_Persons', null=True)),
                ('availability', models.BooleanField(db_column='Availability', default=True)),
                ('cook', models.ForeignKey(blank=True, db_column='Cook_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.chef')),
            ],
            options={
                'db_table': 'menu',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.AutoField(db_column='Booking_ID', primary_key=True, serialize=False)),
                ('startdate', models.DateField(blank=True, db_column='Startdate', null=True)),
                ('enddate', models.DateField(blank=True, db_column='Enddate', null=True)),
                ('checkout', models.TimeField(blank=True, db_column='Checkout', null=True)),
                ('guest', models.ForeignKey(blank=True, db_column='Guest_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.guest')),
                ('room_no', models.ForeignKey(blank=True, db_column='Room_no', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.room')),
                ('receptionist', models.ForeignKey(blank=True, db_column='Receptionist_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.receptionist')),
            ],
            options={
                'db_table': 'booking',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProvidesServices',
            fields=[
                ('room_no', models.OneToOneField(db_column='Room_No', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.room')),
                ('shift', models.CharField(blank=True, db_column='Shift', max_length=10, null=True)),
                ('room_service', models.ForeignKey(db_column='Room_Service_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.roomservice')),
            ],
            options={
                'db_table': 'provides_services',
                'managed': True,
                'unique_together': {('room_no', 'room_service')},
            },
        ),
        migrations.CreateModel(
            name='OrderedItems',
            fields=[
                ('order', models.OneToOneField(db_column='Order_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.orders')),
                ('item', models.ForeignKey(db_column='Item_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.menu')),
            ],
            options={
                'db_table': 'ordered_items',
                'managed': True,
                'unique_together': {('order', 'item')},
            },
        ),
        migrations.CreateModel(
            name='CallForService',
            fields=[
                ('guest', models.OneToOneField(db_column='Guest_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.guest')),
                ('date', models.DateField(blank=True, db_column='Date', null=True)),
                ('time', models.TimeField(blank=True, db_column='Time', null=True)),
                ('room_service', models.ForeignKey(db_column='Room_Service_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.roomservice')),
            ],
            options={
                'db_table': 'call_for_service',
                'managed': True,
                'unique_together': {('guest', 'room_service')},
            },
        ),
        migrations.CreateModel(
            name='Serves',
            fields=[
                ('waiter', models.OneToOneField(db_column='Waiter_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='hotelweb.waiter')),
                ('table_no', models.ForeignKey(db_column='Table_No', on_delete=django.db.models.deletion.DO_NOTHING, to='hotelweb.restauranttable')),
            ],
            options={
                'db_table': 'serves',
                'managed': True,
                'unique_together': {('waiter', 'table_no')},
            },
        ),
    ]
